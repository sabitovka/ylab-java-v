package io.sabitovka.habittracker.repository;

import java.util.List;
import java.util.Optional;

/**
 * Базовый интерфейс для всех репозиториев, который предоставляет основные операции CRUD.
 * Интерфейс может быть реализован для работы с различными типами сущностей и их идентификаторами.
 *
 * @param <I> Тип идентификатора сущности
 * @param <M> Тип модели (сущности), с которой работает репозиторий.
 */
public interface BaseRepository<I, M> {
    /**
     * Проверяет, существует ли сущность с указанным идентификатором.
     *
     * @param id Идентификатор сущности, которую необходимо проверить
     * @return true, если сущность с данным идентификатором существует, иначе false.
     */
    boolean existsById(I id);

    /**
     * Создает новую сущность в хранилище.
     *
     * @param obj Объект сущности, который нужно сохранить.
     * @return Созданная сущность с установленным идентификатором.
     */
    M create(M obj);

    /**
     * Ищет сущность по идентификатору.
     *
     * @param id Идентификатор сущности, которую нужно найти.
     * @return {@link Optional}, содержащий сущность, если она найдена, или пустой {@link Optional}, если нет.
     */
    Optional<M> findById(I id);

    /**
     * Возвращает список всех сущностей из хранилища.
     *
     * @return Список всех сущностей.
     */
    List<M> findAll();

    /**
     * Обновляет существующую сущность в хранилище.
     *
     * @param obj Объект сущности с обновлёнными данными.
     * @return true, если обновление прошло успешно, иначе false.
     */
    boolean update(M obj);

    /**
     * Удаляет сущность с указанным идентификатором из хранилища.
     *
     * @param id Идентификатор сущности, которую нужно удалить.
     * @return true, если удаление прошло успешно, иначе false.
     */
    boolean deleteById(I id);
}
